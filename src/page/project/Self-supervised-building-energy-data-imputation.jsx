import React from 'react';
import Header from '../../components/Header';
import SwiperGallery from './SwiperGallery';

export default function ResponsiveFacade() {
  return (
    <div className="max-w-screen-lg mx-auto px-8 py-12">
      <Header title="Projects" />

      {/* Project title and description */}
      <div className="flex justify-between items-center">
      <h1 className="text-4xl font-bold text-[#25282b] font-playfair mb-1">
        Self-Supervised Building Energy Data Imputation
      </h1>
      <button
        onClick={() => window.history.back()}
        className="px-4 py-2 border border-[#57bfa2] text-[#57bfa2] rounded-md hover:bg-[#57bfa2] hover:text-white transition-all"
      >
        ← Back
      </button>
      </div>
      <h2 className="text-xl text-gray-500 mt-2">
      Generative AI course project
      </h2>
      
      {/* New introduction section */}
      <div className="mt-2 text-left text-lg text-gray-500">
        <p>Group work</p>
        <p>2024 Fall, Generative AI</p>
        <p>Teammates: Jinzhao Tian, Huawei Yu</p>
        <p>Liaisons: Haoyang He</p>
        <p>Medium: Pytorch, WANDB, AI</p>
      </div>

      <p className="text-lg text-gray-600 mt-4 mb-4">
      Building energy data imputation is essential to improve the accuracy of energy analysis and decision-making. However, most existing methods treat the training process as a conventional supervised learning task, overlooking the potential of self-supervised techniques. To bridge the gap, this project proposes a self-supervised learning framework to build energy data imputation using generative models. In the training process, the data will be automatically generated by masking parts of the observed energy records, maximizing the use of limited datasets while enabling scalable training. Furthermore, for incomplete energy records, the masking process can focus on regions with complete data, allowing the model to develop effective imputation strategies for partially flawed datasets—offering a more practical and realistic solution.
      </p>

      {/* Pass folder name to dynamically load images */}
      <SwiperGallery folder="data-imputation" />

    </div>
  );
}
